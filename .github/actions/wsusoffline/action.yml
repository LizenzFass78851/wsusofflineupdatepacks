name: generate_products_action
description: Action to generate wsusoffline products for a specific target OS. (only run this with a container image)

inputs:
  # Actions cannot access secrets so pass them in as inputs
  target:
    required: true
    description: The target os for the wsusoffline package
  cachekey:
    required: true
    description: The cache key to use for caching to compare the generated files
  git_branch:
    required: true
    description: The git branch to use for the wsusoffline package code
  github_token:
    required: true
    description: The GitHub token to use for accessing the repository
  compare_file0:
    required: true
    description: The file to compare the generated files
  compare_file1:
    required: true
    description: The file to compare the generated files
  repository:
    required: false
    description: The repository to save the cache
    default: ${{ github.repository }}

runs:
  using: "composite"
  steps:
    - name: Check inputs
      shell: bash
      run: |
        [[ "${{ inputs.target }}"        ]] || { echo "target input is empty"        ; exit 1; }
        [[ "${{ inputs.cachekey }}"      ]] || { echo "cachekey input is empty"      ; exit 1; }
        [[ "${{ inputs.git_branch }}"    ]] || { echo "git_branch input is empty"    ; exit 1; }
        [[ "${{ inputs.github_token }}"  ]] || { echo "github_token input is empty"  ; exit 1; }
        [[ "${{ inputs.compare_file0 }}" ]] || { echo "compare_file0 input is empty" ; exit 1; }
        [[ "${{ inputs.compare_file1 }}" ]] || { echo "compare_file1 input is empty" ; exit 1; }
        [[ "${{ inputs.repository }}"    ]] || { echo "repository input is empty"    ; exit 1; }

    - name: sleep
      shell: bash
      run: |
        SLEEP="$((1 + $(od -A n -t d -N 2 /dev/urandom | tr -d ' ') % 9))"
        echo "Sleeping $SLEEP seconds ..."
        sleep $SLEEP

    - name: key
      id: key
      shell: bash
      run: |
        export KEY="${GITHUB_WORKFLOW%-*}"
        echo "key=$KEY" >> $GITHUB_OUTPUT
        echo "################################################################" && bash -c "echo KEY=$KEY"

        export MATRIX="${{ inputs.target }}"
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "################################################################" && bash -c "echo MATRIX=$MATRIX"

        export CACHEKEY="${{ inputs.cachekey }}"
        echo "cachekey=$CACHEKEY" >> $GITHUB_OUTPUT
        echo "################################################################" && bash -c "echo CACHEKEY=$CACHEKEY"

        export BRANCH="${{ inputs.git_branch }}"
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "################################################################" && bash -c "echo BRANCH=$BRANCH"

        export TIMESTAMP="$(date -u +%Y%m%d_%H%M%S)"
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "################################################################" && bash -c "echo TIMESTAMP=$TIMESTAMP"

        echo "keymatrix=$KEY-$BRANCH-$CACHEKEY" >> $GITHUB_OUTPUT

    - name: update
      shell: bash
      run: apt-get -y update && apt-get -y upgrade && apt-get -y dist-upgrade

    - name: install
      shell: bash
      run: |
        DEBIAN_FRONTEND=noninteractive apt-get -y install \
          git locales curl jq file cabextract hashdeep unzip wget xmlstarlet dialog genisoimage rsync trash-cli iputils-ping \
        && rm -rf /var/lib/apt/lists/*

    - name: locale
      shell: bash
      run: locale-gen en_US.utf8 && locale-gen de_DE.UTF-8 && update-locale

    - name: clone
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git clone https://github-actions:$GITHUB_TOKEN@${GITHUB_SERVER_URL##*/}/$GITHUB_REPOSITORY.git $GITHUB_WORKSPACE --branch ${{ inputs.git_branch }} --depth=1 --single-branch

    - name: prepare
      shell: bash
      run: |
        adduser --shell /bin/bash --uid 1500 --disabled-password --home /home/builder --comment "" builder
        chown builder ./ -R && chmod +x $PWD/sh/fix-file-permissions.bash

    - name: cache_load
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ inputs.compare_file0 }}
        key: ${{ steps.key.outputs.keymatrix }}-${{ steps.key.outputs.timestamp }}
        restore-keys: |
          ${{ steps.key.outputs.keymatrix }}-

    - name: generate
      shell: bash
      run: |
        export LANG=en_US.utf8
        [ "${{ github.workflow }}" != "${{ steps.key.outputs.key }}" ] && c=5 || c=1
        seq $c | while read x; do cd ./sh && su builder -c '$SHELL -c "$PWD/fix-file-permissions.bash && $PWD/download-updates.bash ${{ inputs.target }} deu,enu -includesp && $PWD/create-iso-image.bash ${{ inputs.target }} -includesp"'; done

    - name: compare
      shell: bash
      id: compare
      run: |
        cd ./client/md
    
        echo "generating SHA File"
        cat $(ls *.txt | grep "glb" | grep -v "win") | sed 's/[#/%].*$//g' | sort | \
          sha256sum -                                | sed 's# .*$##g'     > ${{ inputs.compare_file1 }}

        if [ ! -e "${{ inputs.compare_file0 }}" ]; then
          echo "copy SHA File for cache"
          cp ${{ inputs.compare_file1 }} ${{ inputs.compare_file0 }}
        else
          CONTENT_FILE0=$(cat ${{ inputs.compare_file0 }})
          CONTENT_FILE1=$(cat ${{ inputs.compare_file1 }})
          if [ "$CONTENT_FILE0" = "$CONTENT_FILE1" ]; then
            echo "Still at latest version"
            echo "latest_version=true" >> $GITHUB_OUTPUT
          else
            echo "Not at latest version"
            cp ${{ inputs.compare_file1 }} ${{ inputs.compare_file0 }}
          fi
        fi

    - name: after prepare
      shell: bash
      if: steps.compare.outputs.latest_version != 'true'
      run: |
        # remove unused build files
        rm -r ./client
        # split bigger files
        cd ./iso
        for file in *.iso; do
          if [[ -f "$file" ]]; then
            size=$(stat -c %s "$file")
            if (( size > 1920*1024*1024 )); then
              echo "Processing $file (size: $size bytes > 1920MB)"
              split -b 1920M --numeric-suffixes=1 --suffix-length=3 "$file" "$file."
              rm "$file"
            else
              echo "$file is smaller than 1920 MB, splitting is skipped."
            fi
          fi
        done

    - name: Delete existing tag
      if: steps.compare.outputs.latest_version != 'true'
      continue-on-error: true
      uses: dev-drprasad/delete-tag-and-release@v1.1
      with:
        tag_name: "${{ inputs.git_branch }}-${{ inputs.target }}"
        github_token: ${{ inputs.github_token }}
        delete_release: true
        repo: ${{ inputs.repository }}

    - name: Publish release ISO
      if: steps.compare.outputs.latest_version != 'true'
      uses: softprops/action-gh-release@v2
      with:
        token: "${{ inputs.github_token }}"
        tag_name: "${{ inputs.git_branch }}-${{ inputs.target }}"
        generate_release_notes: false
        prerelease: false
        name: "wsusoffline package for ${{ inputs.git_branch }}-${{ inputs.target }}"
        files: |
          ./iso/*.iso*
        body: |
          ### ${{ inputs.target }} wsusoffline package for ${{ inputs.git_branch }}-${{ inputs.target }}
          - This package was generated by the wsusoffline GitHub Action.
          - The files are downloadable in the Assets.
          - For more information, see the [README.md in the repository](https://github.com/${{ inputs.repository }}/blob/${{ github.ref }}/README.md).

    - name: cache_save
      if: steps.compare.outputs.latest_version != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ inputs.compare_file0 }}
        key: ${{ steps.key.outputs.keymatrix }}-${{ steps.key.outputs.timestamp }}
